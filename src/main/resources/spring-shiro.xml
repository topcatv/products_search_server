<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd


       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- =========================================================
                   Shiro Components
        ========================================================= -->

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
    </bean>

    <!-- 虚需要自己写的realm实现类 充当shiro和应用的安全数据的桥梁  -->
    <bean id="DbRealm" class="com.isafeway.products.security.DBRealm" depends-on="lifecycleBeanPostProcessor" />

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="DbRealm" />
            </list>
        </property>
        <property name="cacheManager" ref="cacheManager" />
    </bean>

    <!-- Shiro生命周期处理器 -->
    <!-- 官方对其的解释是  http://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/spring/LifecycleBeanPostProcessor.html
    This post processor makes it easier to configure Shiro beans in Spring,
    since the user never has to worry about whether or not
    if they have to specify init-method and destroy-method bean attributes.
            大意是使shiro bena 注入更加方便  -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/" />
        <property name="unauthorizedUrl" value="/unauthorized" />
        <property name="filters">
            <util:map>
                <entry key="authc">
                    <!-- 身份验证拦截器，默认为FormAuthenticationFilter，但 PassThruAuthenticationFilter功能相对强大，详情见
                    https://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/web/filter/authc/PassThruAuthenticationFilter.html-->
                    <bean class="com.isafeway.products.DmPassThruAuthenticationFilter" />
                </entry>
            </util:map>
        </property>

        <!-- shiro的强大的拦截器链，可以匹配全部的url，并根据配置进行拦截-->
        <property name="filterChainDefinitions">
            <value>
                # 无需认证便可以访问的的文件放在前面
                / = anon
                /index.jsp = anon
                /login = anon
                /logout = anon
                /dist/** = anon
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
    <!-- 这里要配置以下两个bean,在这之前要配置好lifecycleBeanPostProcessor-->

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <!--  加上下面这一句是为了解决If the controller requires proxying (e.g. due to @Transactional), please use class-based proxying  的报错-->
        <!-- 参考http://www.cnblogs.com/digdeep/p/4624998.html 会发现上面错误是 Spring AOP 不同配置方式产生的冲突问题 -->
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>

</beans>